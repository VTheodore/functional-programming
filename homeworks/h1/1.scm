(define (accumulate op term init a next b)
  (define (loop i res)
    (if (<= i b)
        (loop (next i) (op res (term i)))
        res))
  (loop a init))

(define (squares n)
  (let* (
         (width (- (* 4 n) 1))
         (heigth (* 2 n))
         (horizontal-symbol #\─)
         (left-pipe "│ ")
         (right-pipe " │")
         (new-line #\newLine)
         (left-symbol (lambda (i) (if (<= i n) #\┌ #\└)))
         (right-symbol (lambda (i) (if (<= i n) #\┐ #\┘)))
         (loop-n (lambda (op n)
                   (define (id x) x)
                   (define (1+ n) (+ n 1))
                   (accumulate op id "" 1 1+ n)))
         (display-n-times (lambda (n str)
                          (loop-n (lambda (i1 i2) (display str)) n)))
         (pipes-number (lambda (row)
                       (if (<= row n)
                           row
                           (+ (- heigth row) 1))))
         (pipes-length (lambda (row-n) (* 4 (- row-n 1))))
         (horizontal-length (lambda (row) (- width (pipes-length (pipes-number row)) 2)))
         (print-row-op (lambda (res i)
                      (begin
                        (display-n-times (- (pipes-number i) 1) left-pipe)
                        (display-n-times 1 (left-symbol i))
                        (display-n-times (horizontal-length i) horizontal-symbol)
                        (display-n-times 1 (right-symbol i))
                        (display-n-times (- (pipes-number i) 1) right-pipe)
                        (display new-line))))
         )
    (loop-n print-row-op heigth))
    )